name: CREATEFI CI/CD

on:
  push:
    branches: [ main, createfi-main, develop ]
  pull_request:
    branches: [ main, createfi-main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Blockchain Tests
  blockchain-test:
    name: Blockchain Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build blockchain
      run: cargo build --release
    
    - name: Run blockchain tests
      run: cargo test --release
    
    - name: Check blockchain compilation
      run: cargo check --release

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend type check
      run: |
        cd frontend
        npm run type-check
    
    - name: Run frontend lint
      run: |
        cd frontend
        npm run lint
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Run cargo audit
      run: cargo audit
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run fmt check
      run: cargo fmt --all -- --check

  # Build and Deploy (on main branch)
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [blockchain-test, frontend-test, security-audit, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/createfi-main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
    
    - name: Build blockchain release
      run: cargo build --release
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Upload blockchain artifacts
      uses: actions/upload-artifact@v3
      with:
        name: blockchain-binary
        path: target/release/solochain-template-node
    
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist

  # Documentation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Generate Rust documentation
      run: cargo doc --no-deps
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: rust-docs
        path: target/doc
