//! Autogenerated weights for `pallet_fi_stablecoin`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `createfi-node`, CPU: `Intel(R) Core(TM) i7-10700K CPU @ 3.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/solochain-template-node
// benchmark
// pallet
// --chain
// dev
// --steps
// 50
// --repeat
// 20
// --pallet
// pallet_fi_stablecoin
// --extrinsic
// *
// --wasm-execution
// compiled
// --output
// pallets/fi-stablecoin/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_fi_stablecoin`.
pub trait WeightInfo {
	fn mint_fi() -> Weight;
	fn burn_fi() -> Weight;
	fn deposit_collateral() -> Weight;
	fn withdraw_collateral() -> Weight;
}

/// Weights for `pallet_fi_stablecoin` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `FiStablecoin::Balances` (r:1 w:1)
	/// Proof: `FiStablecoin::Balances` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::Collateral` (r:1 w:1)
	/// Proof: `FiStablecoin::Collateral` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::TotalSupply` (r:1 w:1)
	/// Proof: `FiStablecoin::TotalSupply` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::TotalCollateral` (r:1 w:1)
	/// Proof: `FiStablecoin::TotalCollateral` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn mint_fi() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `6047`
		//  Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(25_000_000, 0)
			.saturating_add(Weight::from_parts(0, 6047))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `FiStablecoin::Balances` (r:1 w:1)
	/// Proof: `FiStablecoin::Balances` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::TotalSupply` (r:1 w:1)
	/// Proof: `FiStablecoin::TotalSupply` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::Collateral` (r:1 w:1)
	/// Proof: `FiStablecoin::Collateral` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::TotalCollateral` (r:1 w:1)
	/// Proof: `FiStablecoin::TotalCollateral` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Accounts` (r:1 w:1)
	/// Proof: `Balances::Accounts` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn burn_fi() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `8667`
		//  Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(35_000_000, 0)
			.saturating_add(Weight::from_parts(0, 8667))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Balances::Accounts` (r:1 w:1)
	/// Proof: `Balances::Accounts` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::Collateral` (r:1 w:1)
	/// Proof: `FiStablecoin::Collateral` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::TotalCollateral` (r:1 w:1)
	/// Proof: `FiStablecoin::TotalCollateral` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn deposit_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `5638`
		//  Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(30_000_000, 0)
			.saturating_add(Weight::from_parts(0, 5638))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `FiStablecoin::Collateral` (r:1 w:1)
	/// Proof: `FiStablecoin::Collateral` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `FiStablecoin::TotalCollateral` (r:1 w:1)
	/// Proof: `FiStablecoin::TotalCollateral` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Accounts` (r:1 w:1)
	/// Proof: `Balances::Accounts` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `5638`
		//  Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(30_000_000, 0)
			.saturating_add(Weight::from_parts(0, 5638))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}